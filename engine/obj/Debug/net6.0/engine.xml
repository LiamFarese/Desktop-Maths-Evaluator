<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>engine</name></assembly>
<members>
<member name="T:Engine.IRootFinder">
<summary>
 Interface for finding roots of polynomials.
</summary>
</member>
<member name="T:Engine.IEvaluator">
<summary>
 Interface for evaluating mathematical expressions and plot functions.
</summary>
</member>
<member name="T:Engine.EvaluatorWrapper">
<summary>
 Implements IEvaluator Interface.
</summary>
</member>
<member name="T:Engine.DifferentiatorWrapper">
<summary>
 Implements IDifferentiator interface.
</summary>
</member>
<member name="T:Engine.ASTGetterWrapper">
<summary>
 Implements IASTGetter interface.
</summary>
</member>
<member name="T:Engine.Types.Vertex">
<summary>
 Trapezium vertex with x,y coordinates.
</summary>
</member>
<member name="T:Engine.Types.Node">
<summary>
 Base type for expression nodes in the AST.
</summary>
</member>
<member name="M:Engine.ASTParser.parseVariableAssignment(Microsoft.FSharp.Collections.FSharpList{Engine.Tokeniser.Token})">
<summary>
 Parses a potential variable assignment, if not it will default to parse an expression
</summary>
</member>
<member name="M:Engine.ASTParser.parseExpressionOperators(Engine.Types.Node,Microsoft.FSharp.Collections.FSharpList{Engine.Tokeniser.Token})">
<summary>
 Parses the addition and subtraction operators in an expression &lt;Eopt&gt;.
</summary>
</member>
<member name="M:Engine.ASTParser.parseExpression(Microsoft.FSharp.Collections.FSharpList{Engine.Tokeniser.Token})">
<summary>
 Parses an Expression &lt;E&gt;, which can include + or - operators.
</summary>
</member>
<member name="M:Engine.ASTParser.parseTermOperators(Engine.Types.Node,Microsoft.FSharp.Collections.FSharpList{Engine.Tokeniser.Token})">
<summary>
 Parses the operators in a term &lt;Topt&gt;.
</summary>
</member>
<member name="M:Engine.ASTParser.parseTerm(Microsoft.FSharp.Collections.FSharpList{Engine.Tokeniser.Token})">
<summary>
 Parses the Term &lt;T&gt;, which is a Number or Parenthesis Expression followed by optional arithemtic operations.
</summary>
</member>
<member name="M:Engine.ASTParser.parsePowerOperator(Engine.Types.Node,Microsoft.FSharp.Collections.FSharpList{Engine.Tokeniser.Token})">
<summary>
 Parses power operator &lt;Popt&gt; in an expression, handling right-associativity by
 first parsing tokens right after power operator(immediateRhsTerm), where if it
 finds more power operators on the right hand side, it will recursevily call
 itself to ensure right-associativity.
</summary>
</member>
<member name="M:Engine.ASTParser.parsePower(Microsoft.FSharp.Collections.FSharpList{Engine.Tokeniser.Token})">
<summary>
 Parses the power &lt;P&gt;.
</summary>
</member>
<member name="M:Engine.ASTParser.parseNumber(Microsoft.FSharp.Collections.FSharpList{Engine.Tokeniser.Token})">
<summary>
 Parses a Number or a Parenthesis expression with/without Unary minus (&lt;NR&gt;).
</summary>
</member>
<member name="M:Engine.Differentiation.differentiateBinaryOperations(System.String,System.String,Engine.Types.Node,Engine.Types.Node)">
<summary>
 Differentiate using Derivative Rules(ref: https://www.mathsisfun.com/calculus/derivatives-rules.html).
 Opeartion is binary operaion.
 Left and right are respective operands of that operation.
 Var is the variable with respect to we are differentiating.
</summary>
</member>
<member name="M:Engine.Differentiation.differentiate(Engine.Types.Node,System.String)">
<summary>
 Differentiate with respect to a variable.
</summary>
</member>
<member name="P:Engine.Differentiation.derivativeLUT">
<summary>
 Look Up Table for trigonometric or logarithmic functions.
</summary>
</member>
<member name="M:Engine.Integration.integrate(System.String,System.Double,System.Double,System.Double)">
<summary>
 Approximate the integral of a function using the trapezium rule.
 step is the width of each trapezium.
 Returns a tuple of area unde the curve and the list of vertices for every trapezium or error.
</summary>
</member>
<member name="M:Engine.Integration.sumTrapeziumAreas(System.Double,System.Double,System.Double,System.Double,System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Double,System.Double}})">
<summary>
 Recursively sums the areas of trapeziums from the current x to the max x.
 totalArea accumulates the total area under the curve.
</summary>
</member>
<member name="M:Engine.Integration.calculateTrapeziumArea(System.String,System.Double,System.Double,System.Double)">
<summary>
 Calculates the area of a single trapezium under the curve of a given expression.
 xLeft and xRight are x coordinates of left and right sides of the trapezium.
 step is the distance between xLeft and xRight.
 Returns a tuple of trapezium area and its vertices or error.
</summary>
</member>
</members>
</doc>
